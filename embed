#!/usr/bin/env python
import umap
import pandas as pd
import csv
import argparse

parser = argparse.ArgumentParser(description='UMAP, but with arguments')
parser.add_argument(
    '-r', '--rows',
    dest='nrows',
    type=int,
    metavar='ROWS',
    help='number of rows to use (default: 100000)',
    default=100000
)
parser.add_argument(
    '-n', '--neighbors',
    dest='n_neighbors',
    type=int,
    metavar='NEIGHBORS',
    help='number of neighbors, 5 - 50 (default: 15)',
    default=15
)
parser.add_argument(
    '--input_dimensions',
    dest='usecols',
    type=int,
    metavar='DIMENSIONS',
    help='number of dimensions in source word embeddings (default: 300)',
    default=300
)
parser.add_argument(
    '-d', '--output_dimensions',
    dest='n_components',
    type=int,
    metavar='DIMENSIONS',
    help='number of output dimensions to embed (default: 2)',
    default=2
)
parser.add_argument(
    '-m', '--min',
    dest='min_dist',
    type=float,
    metavar='MIN_DIST',
    help='minimum distance, 0.001 - 0.5 (default: 0.1)',
    default=0.1
)
parser.add_argument(
    '--metric',
    dest='metric',
    metavar='METRIC',
    help='distance function, e.g. euclidean, cosine, correlation (default: euclidean)',
    default='euclidean'
)
parser.add_argument(
    'input_path',
    metavar='INPUT',
    help='source vector file, word2vec style vector file'
)
parser.add_argument(
    'output_path',
    metavar='OUTPUT',
    help='output path'
)

args = parser.parse_args()
print(args)

vectors = pd.read_table(
    args.input_path,
    sep=' ',
    skiprows=0,
    index_col=0,
    usecols=range(0, args.usecols + 1),
    nrows=args.nrows,
    header=None,
    quoting=csv.QUOTE_NONE
)

print(vectors.shape)
print(vectors.values)
print(vectors.index.values)

embeddings = umap.UMAP(
    random_state=42,
    n_neighbors=args.n_neighbors,
    n_components=args.n_components,
    min_dist=args.min_dist,
    metric=args.metric
).fit_transform(vectors.values)

indexed = pd.DataFrame(
    data=embeddings,
    index=vectors.index.values
)

indexed.to_csv(
    args.output_path,
    header=False
)

print(embeddings)
print(indexed)
